<?php
/**
 * ZonemetadataApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Storm\PowerDnsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PowerDNS Authoritative HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.15
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Storm\PowerDnsClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Storm\PowerDnsClient\ApiException;
use Storm\PowerDnsClient\Configuration;
use Storm\PowerDnsClient\HeaderSelector;
use Storm\PowerDnsClient\ObjectSerializer;

/**
 * ZonemetadataApi Class Doc Comment
 *
 * @category Class
 * @package  Storm\PowerDnsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ZonemetadataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createMetadata
     *
     * Creates a set of metadata entries
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId zoneId (required)
     * @param  \Storm\PowerDnsClient\Model\Metadata1 $metadata metadata (required)
     *
     * @throws \Storm\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createMetadata($serverId, $zoneId, $metadata)
    {
        $this->createMetadataWithHttpInfo($serverId, $zoneId, $metadata);
    }

    /**
     * Operation createMetadataWithHttpInfo
     *
     * Creates a set of metadata entries
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  \Storm\PowerDnsClient\Model\Metadata1 $metadata (required)
     *
     * @throws \Storm\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMetadataWithHttpInfo($serverId, $zoneId, $metadata)
    {
        $request = $this->createMetadataRequest($serverId, $zoneId, $metadata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMetadataAsync
     *
     * Creates a set of metadata entries
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  \Storm\PowerDnsClient\Model\Metadata1 $metadata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMetadataAsync($serverId, $zoneId, $metadata)
    {
        return $this->createMetadataAsyncWithHttpInfo($serverId, $zoneId, $metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMetadataAsyncWithHttpInfo
     *
     * Creates a set of metadata entries
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  \Storm\PowerDnsClient\Model\Metadata1 $metadata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMetadataAsyncWithHttpInfo($serverId, $zoneId, $metadata)
    {
        $returnType = '';
        $request = $this->createMetadataRequest($serverId, $zoneId, $metadata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMetadata'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  \Storm\PowerDnsClient\Model\Metadata1 $metadata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createMetadataRequest($serverId, $zoneId, $metadata)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling createMetadata'
            );
        }
        // verify the required parameter 'zoneId' is set
        if ($zoneId === null || (is_array($zoneId) && count($zoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneId when calling createMetadata'
            );
        }
        // verify the required parameter 'metadata' is set
        if ($metadata === null || (is_array($metadata) && count($metadata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $metadata when calling createMetadata'
            );
        }

        $resourcePath = '/servers/{server_id}/zones/{zone_id}/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }
        // path params
        if ($zoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_id' . '}',
                ObjectSerializer::toPathValue($zoneId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($metadata)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($metadata));
            } else {
                $httpBody = $metadata;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMetadata
     *
     * Delete all items of a single kind of domain metadata.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     * @param  string $metadataKind The kind of metadata (required)
     *
     * @throws \Storm\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMetadata($serverId, $zoneId, $metadataKind)
    {
        $this->deleteMetadataWithHttpInfo($serverId, $zoneId, $metadataKind);
    }

    /**
     * Operation deleteMetadataWithHttpInfo
     *
     * Delete all items of a single kind of domain metadata.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     * @param  string $metadataKind The kind of metadata (required)
     *
     * @throws \Storm\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMetadataWithHttpInfo($serverId, $zoneId, $metadataKind)
    {
        $request = $this->deleteMetadataRequest($serverId, $zoneId, $metadataKind);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMetadataAsync
     *
     * Delete all items of a single kind of domain metadata.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     * @param  string $metadataKind The kind of metadata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMetadataAsync($serverId, $zoneId, $metadataKind)
    {
        return $this->deleteMetadataAsyncWithHttpInfo($serverId, $zoneId, $metadataKind)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMetadataAsyncWithHttpInfo
     *
     * Delete all items of a single kind of domain metadata.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     * @param  string $metadataKind The kind of metadata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMetadataAsyncWithHttpInfo($serverId, $zoneId, $metadataKind)
    {
        $returnType = '';
        $request = $this->deleteMetadataRequest($serverId, $zoneId, $metadataKind);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMetadata'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     * @param  string $metadataKind The kind of metadata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteMetadataRequest($serverId, $zoneId, $metadataKind)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling deleteMetadata'
            );
        }
        // verify the required parameter 'zoneId' is set
        if ($zoneId === null || (is_array($zoneId) && count($zoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneId when calling deleteMetadata'
            );
        }
        // verify the required parameter 'metadataKind' is set
        if ($metadataKind === null || (is_array($metadataKind) && count($metadataKind) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $metadataKind when calling deleteMetadata'
            );
        }

        $resourcePath = '/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }
        // path params
        if ($zoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_id' . '}',
                ObjectSerializer::toPathValue($zoneId),
                $resourcePath
            );
        }
        // path params
        if ($metadataKind !== null) {
            $resourcePath = str_replace(
                '{' . 'metadata_kind' . '}',
                ObjectSerializer::toPathValue($metadataKind),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMetadata
     *
     * Get the content of a single kind of domain metadata as a Metadata object.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     * @param  string $metadataKind The kind of metadata (required)
     *
     * @throws \Storm\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|object|object|object|object
     */
    public function getMetadata($serverId, $zoneId, $metadataKind)
    {
        list($response) = $this->getMetadataWithHttpInfo($serverId, $zoneId, $metadataKind);
        return $response;
    }

    /**
     * Operation getMetadataWithHttpInfo
     *
     * Get the content of a single kind of domain metadata as a Metadata object.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     * @param  string $metadataKind The kind of metadata (required)
     *
     * @throws \Storm\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|object|object|object|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMetadataWithHttpInfo($serverId, $zoneId, $metadataKind)
    {
        $request = $this->getMetadataRequest($serverId, $zoneId, $metadataKind);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMetadataAsync
     *
     * Get the content of a single kind of domain metadata as a Metadata object.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     * @param  string $metadataKind The kind of metadata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetadataAsync($serverId, $zoneId, $metadataKind)
    {
        return $this->getMetadataAsyncWithHttpInfo($serverId, $zoneId, $metadataKind)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMetadataAsyncWithHttpInfo
     *
     * Get the content of a single kind of domain metadata as a Metadata object.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     * @param  string $metadataKind The kind of metadata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetadataAsyncWithHttpInfo($serverId, $zoneId, $metadataKind)
    {
        $returnType = 'object';
        $request = $this->getMetadataRequest($serverId, $zoneId, $metadataKind);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMetadata'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     * @param  string $metadataKind The kind of metadata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMetadataRequest($serverId, $zoneId, $metadataKind)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling getMetadata'
            );
        }
        // verify the required parameter 'zoneId' is set
        if ($zoneId === null || (is_array($zoneId) && count($zoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneId when calling getMetadata'
            );
        }
        // verify the required parameter 'metadataKind' is set
        if ($metadataKind === null || (is_array($metadataKind) && count($metadataKind) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $metadataKind when calling getMetadata'
            );
        }

        $resourcePath = '/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }
        // path params
        if ($zoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_id' . '}',
                ObjectSerializer::toPathValue($zoneId),
                $resourcePath
            );
        }
        // path params
        if ($metadataKind !== null) {
            $resourcePath = str_replace(
                '{' . 'metadata_kind' . '}',
                ObjectSerializer::toPathValue($metadataKind),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listMetadata
     *
     * Get all the Metadata associated with the zone.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \Storm\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Storm\PowerDnsClient\Model\Metadata[]|object|object|object|object
     */
    public function listMetadata($serverId, $zoneId)
    {
        list($response) = $this->listMetadataWithHttpInfo($serverId, $zoneId);
        return $response;
    }

    /**
     * Operation listMetadataWithHttpInfo
     *
     * Get all the Metadata associated with the zone.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \Storm\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Storm\PowerDnsClient\Model\Metadata[]|object|object|object|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function listMetadataWithHttpInfo($serverId, $zoneId)
    {
        $request = $this->listMetadataRequest($serverId, $zoneId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Storm\PowerDnsClient\Model\Metadata[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Storm\PowerDnsClient\Model\Metadata[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Storm\PowerDnsClient\Model\Metadata[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Storm\PowerDnsClient\Model\Metadata[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listMetadataAsync
     *
     * Get all the Metadata associated with the zone.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMetadataAsync($serverId, $zoneId)
    {
        return $this->listMetadataAsyncWithHttpInfo($serverId, $zoneId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMetadataAsyncWithHttpInfo
     *
     * Get all the Metadata associated with the zone.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMetadataAsyncWithHttpInfo($serverId, $zoneId)
    {
        $returnType = '\Storm\PowerDnsClient\Model\Metadata[]';
        $request = $this->listMetadataRequest($serverId, $zoneId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMetadata'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId The id of the zone to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listMetadataRequest($serverId, $zoneId)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling listMetadata'
            );
        }
        // verify the required parameter 'zoneId' is set
        if ($zoneId === null || (is_array($zoneId) && count($zoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneId when calling listMetadata'
            );
        }

        $resourcePath = '/servers/{server_id}/zones/{zone_id}/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }
        // path params
        if ($zoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_id' . '}',
                ObjectSerializer::toPathValue($zoneId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifyMetadata
     *
     * Replace the content of a single kind of domain metadata.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId zoneId (required)
     * @param  string $metadataKind The kind of metadata (required)
     * @param  \Storm\PowerDnsClient\Model\Metadata2 $metadata metadata (required)
     *
     * @throws \Storm\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|object|object|object|object
     */
    public function modifyMetadata($serverId, $zoneId, $metadataKind, $metadata)
    {
        list($response) = $this->modifyMetadataWithHttpInfo($serverId, $zoneId, $metadataKind, $metadata);
        return $response;
    }

    /**
     * Operation modifyMetadataWithHttpInfo
     *
     * Replace the content of a single kind of domain metadata.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  string $metadataKind The kind of metadata (required)
     * @param  \Storm\PowerDnsClient\Model\Metadata2 $metadata (required)
     *
     * @throws \Storm\PowerDnsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|object|object|object|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyMetadataWithHttpInfo($serverId, $zoneId, $metadataKind, $metadata)
    {
        $request = $this->modifyMetadataRequest($serverId, $zoneId, $metadataKind, $metadata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modifyMetadataAsync
     *
     * Replace the content of a single kind of domain metadata.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  string $metadataKind The kind of metadata (required)
     * @param  \Storm\PowerDnsClient\Model\Metadata2 $metadata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyMetadataAsync($serverId, $zoneId, $metadataKind, $metadata)
    {
        return $this->modifyMetadataAsyncWithHttpInfo($serverId, $zoneId, $metadataKind, $metadata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyMetadataAsyncWithHttpInfo
     *
     * Replace the content of a single kind of domain metadata.
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  string $metadataKind The kind of metadata (required)
     * @param  \Storm\PowerDnsClient\Model\Metadata2 $metadata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyMetadataAsyncWithHttpInfo($serverId, $zoneId, $metadataKind, $metadata)
    {
        $returnType = 'object';
        $request = $this->modifyMetadataRequest($serverId, $zoneId, $metadataKind, $metadata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyMetadata'
     *
     * @param  string $serverId The id of the server to retrieve (required)
     * @param  string $zoneId (required)
     * @param  string $metadataKind The kind of metadata (required)
     * @param  \Storm\PowerDnsClient\Model\Metadata2 $metadata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modifyMetadataRequest($serverId, $zoneId, $metadataKind, $metadata)
    {
        // verify the required parameter 'serverId' is set
        if ($serverId === null || (is_array($serverId) && count($serverId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serverId when calling modifyMetadata'
            );
        }
        // verify the required parameter 'zoneId' is set
        if ($zoneId === null || (is_array($zoneId) && count($zoneId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneId when calling modifyMetadata'
            );
        }
        // verify the required parameter 'metadataKind' is set
        if ($metadataKind === null || (is_array($metadataKind) && count($metadataKind) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $metadataKind when calling modifyMetadata'
            );
        }
        // verify the required parameter 'metadata' is set
        if ($metadata === null || (is_array($metadata) && count($metadata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $metadata when calling modifyMetadata'
            );
        }

        $resourcePath = '/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serverId !== null) {
            $resourcePath = str_replace(
                '{' . 'server_id' . '}',
                ObjectSerializer::toPathValue($serverId),
                $resourcePath
            );
        }
        // path params
        if ($zoneId !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_id' . '}',
                ObjectSerializer::toPathValue($zoneId),
                $resourcePath
            );
        }
        // path params
        if ($metadataKind !== null) {
            $resourcePath = str_replace(
                '{' . 'metadata_kind' . '}',
                ObjectSerializer::toPathValue($metadataKind),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($metadata)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($metadata));
            } else {
                $httpBody = $metadata;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
